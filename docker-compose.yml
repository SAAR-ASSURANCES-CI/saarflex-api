services:
  api:
    build:
      context: .
      target: development
    container_name: saarflex-api
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      saarflex-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:cached
      - ./package.json:/app/package.json:cached
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:cached
      - ./tsconfig.json:/app/tsconfig.json:cached
      - ./nest-cli.json:/app/nest-cli.json:cached
      - api_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    command:
      - sh
      - -c
      - |
        echo "Waiting for dependencies..."
        dockerize -wait tcp://saarflex-db:3306 -timeout 120s -wait-retry-interval 5s
        dockerize -wait tcp://redis:6379 -timeout 60s -wait-retry-interval 2s
        echo "All services ready. Starting application..."
        exec pnpm run start:dev
    networks:
      - saarflex-network

  saarflex-db:
    image: mysql:8.0
    container_name: saarflex-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - saarflex_db_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_ROOT_PASSWORD}",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped
    networks:
      - saarflex-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: saarflex-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD}
      PMA_ARBITRARY: 1
      MYSQL_ALLOW_EMPTY_PASSWORD: 0
    depends_on:
      saarflex-db:
        condition: service_healthy
    networks:
      - saarflex-network

  redis:
    image: redis:7-alpine
    container_name: saarflex-redis
    # ports:
    #   - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 15s
    restart: unless-stopped
    networks:
      - saarflex-network

  redis-insight:
    image: redis/redisinsight:latest
    container_name: saarflex-redis-insight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redis_insight_data:/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - saarflex-network

  prometheus:
    image: prom/prometheus:latest
    container_name: saarflex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.external-url=http://localhost:9090"
    networks:
      - saarflex-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: saarflex-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - saarflex-network
    restart: unless-stopped

volumes:
  saarflex_db_data:
    driver: local
  api_node_modules:
    driver: local
  redis_data:
    driver: local
  redis_insight_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  saarflex-network:
    driver: bridge
